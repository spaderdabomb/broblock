//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""WeaponsMap"",
            ""id"": ""f6e365aa-c089-4a02-95c3-2d07c32743cf"",
            ""actions"": [
                {
                    ""name"": ""UseWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""3b3ad877-8b7a-4a40-9486-4052b9532879"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9adea22-5b41-40bb-b089-f8538fb18ba8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UtilityMap"",
            ""id"": ""3fb56ce7-086f-43c7-8b97-b0ad82558123"",
            ""actions"": [
                {
                    ""name"": ""PlaceBlock"",
                    ""type"": ""Button"",
                    ""id"": ""637fc681-2736-4cfe-83e1-4d094c02a20a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cde3203d-0305-46cb-9e0f-41cb0fde462b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement"",
            ""id"": ""6cb67e07-aa83-4475-8474-05da280ce0e8"",
            ""actions"": [
                {
                    ""name"": "" Move"",
                    ""type"": ""Value"",
                    ""id"": ""f720172a-20ea-421a-8c9d-80b3dc8645fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cd244b1e-6cf5-40f8-8317-7c8da76fc1e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a108a059-12e9-4f77-94ff-04a745693c96"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9aaf0bf2-2f9d-47c7-a29e-c022e7307dc3"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e80366a2-b0da-4f50-ad9a-1481f2977096"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8633b3bd-999d-4b04-b4b1-1bd06cd7d467"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""92bdf8fd-050e-4e84-8497-b684be25d76a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d8be600d-ecb4-4ae2-9311-d8d757b957b3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3747ee78-2eb9-45e5-af4d-b165edfc1bb6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9906adb5-7e58-4efd-8d49-e71a928d36f0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b5463f6d-89f7-4edb-9eeb-4a3a43c4d9fc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0123ff69-6089-4703-8407-8c52fd47c27e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WeaponsMap
        m_WeaponsMap = asset.FindActionMap("WeaponsMap", throwIfNotFound: true);
        m_WeaponsMap_UseWeapon = m_WeaponsMap.FindAction("UseWeapon", throwIfNotFound: true);
        // UtilityMap
        m_UtilityMap = asset.FindActionMap("UtilityMap", throwIfNotFound: true);
        m_UtilityMap_PlaceBlock = m_UtilityMap.FindAction("PlaceBlock", throwIfNotFound: true);
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction(" Move", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WeaponsMap
    private readonly InputActionMap m_WeaponsMap;
    private List<IWeaponsMapActions> m_WeaponsMapActionsCallbackInterfaces = new List<IWeaponsMapActions>();
    private readonly InputAction m_WeaponsMap_UseWeapon;
    public struct WeaponsMapActions
    {
        private @PlayerInput m_Wrapper;
        public WeaponsMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseWeapon => m_Wrapper.m_WeaponsMap_UseWeapon;
        public InputActionMap Get() { return m_Wrapper.m_WeaponsMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponsMapActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponsMapActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponsMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponsMapActionsCallbackInterfaces.Add(instance);
            @UseWeapon.started += instance.OnUseWeapon;
            @UseWeapon.performed += instance.OnUseWeapon;
            @UseWeapon.canceled += instance.OnUseWeapon;
        }

        private void UnregisterCallbacks(IWeaponsMapActions instance)
        {
            @UseWeapon.started -= instance.OnUseWeapon;
            @UseWeapon.performed -= instance.OnUseWeapon;
            @UseWeapon.canceled -= instance.OnUseWeapon;
        }

        public void RemoveCallbacks(IWeaponsMapActions instance)
        {
            if (m_Wrapper.m_WeaponsMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponsMapActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponsMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponsMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponsMapActions @WeaponsMap => new WeaponsMapActions(this);

    // UtilityMap
    private readonly InputActionMap m_UtilityMap;
    private List<IUtilityMapActions> m_UtilityMapActionsCallbackInterfaces = new List<IUtilityMapActions>();
    private readonly InputAction m_UtilityMap_PlaceBlock;
    public struct UtilityMapActions
    {
        private @PlayerInput m_Wrapper;
        public UtilityMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceBlock => m_Wrapper.m_UtilityMap_PlaceBlock;
        public InputActionMap Get() { return m_Wrapper.m_UtilityMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UtilityMapActions set) { return set.Get(); }
        public void AddCallbacks(IUtilityMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Add(instance);
            @PlaceBlock.started += instance.OnPlaceBlock;
            @PlaceBlock.performed += instance.OnPlaceBlock;
            @PlaceBlock.canceled += instance.OnPlaceBlock;
        }

        private void UnregisterCallbacks(IUtilityMapActions instance)
        {
            @PlaceBlock.started -= instance.OnPlaceBlock;
            @PlaceBlock.performed -= instance.OnPlaceBlock;
            @PlaceBlock.canceled -= instance.OnPlaceBlock;
        }

        public void RemoveCallbacks(IUtilityMapActions instance)
        {
            if (m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUtilityMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UtilityMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UtilityMapActions @UtilityMap => new UtilityMapActions(this);

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IWeaponsMapActions
    {
        void OnUseWeapon(InputAction.CallbackContext context);
    }
    public interface IUtilityMapActions
    {
        void OnPlaceBlock(InputAction.CallbackContext context);
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
